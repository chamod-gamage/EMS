package com.mycompany.ems;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 567882
 */
import java.awt.Color;
import java.text.DecimalFormat;
public class EditEmployeeFrame extends javax.swing.JFrame {
    DecimalFormat decimalFormat = new DecimalFormat("0.00");

    /**
     * Creates new form EditEmployeeFrame
     */
    //Frame to edit information of employees (including switching from parttime to full time)
    public boolean valid = true; //Checks validity of user entered information
    public boolean done = false; //Checks whether user has submitted updated info
    
    private static MyHashTable mainHT = MainJFrame.getTheHT(); // gets ref value for hash
    private EmployeeInfo employeeToEdit; //The employee that will edited
    public EditEmployeeFrame(EmployeeInfo employee) {
        initComponents();
        jComboBox2.removeAllItems(); 
        for (int x = 0; x < EmployeeInfo.locations.size(); x++) {//Loads in current location to locations ComboBox
            if (EmployeeInfo.locations.get(x).equals(employee.getWorkLocation())) {
                jComboBox2.addItem(EmployeeInfo.locations.get(x));
            }
        }
        for (int x = 0; x < EmployeeInfo.locations.size(); x++) {//Loads in other locations to locations ComboBox
            if (!EmployeeInfo.locations.get(x).equals(employee.getWorkLocation())) {
                jComboBox2.addItem(EmployeeInfo.locations.get(x));
            }
        }
        jComboBox1.removeAllItems();
        for (int x = 0; x < 3; x++) { //Loads in gender (current) to genders ComboBox
            if (EmployeeInfo.genders[x] == employee.getGender()) {
                jComboBox1.addItem(EmployeeInfo.genders[x]);
            }
        }
        for (int x = 0; x < 3; x++) {//Loads in other genders to gender combobox
            if (EmployeeInfo.genders[x] != employee.getGender()) {
                jComboBox1.addItem(EmployeeInfo.genders[x]);
            }
        }
        
        employeeToEdit = employee; //Sets employee being edited to one being passed through the function
        if (employee instanceof PartTimeEmployee){//Sets parttime button selected if emp was originally parttime
            partTimeButton.setSelected(true);
            partTimeButtonActionPerformed(null);
        }
        
        else if (employee instanceof FullTimeEmployee){//Sets fulltime button selected if emp was originally fulltime
            fullTimeButton.setSelected(true);
            fullTimeButtonActionPerformed(null);
        }
        setTextFields();
        invalidLabel.setVisible(false);
    }
    
    //Method below sets the text fields to the values of the original employee
    private void setTextFields(){ // DEFAULT VALUES ARE USED IF INFO IS BLANK, EXCEPTION IF IT CAN BE CALCULATED
        firstNameInput.setText(employeeToEdit.getFirstName());
        lastNameInput.setText(employeeToEdit.getLastName());
        String empNum = Integer.toString(employeeToEdit.getEmployeeNumber());
        employeeNumberInput.setText(empNum);
        jComboBox1.setSelectedItem(employeeToEdit.getWorkLocation());
        jComboBox2.setSelectedItem(employeeToEdit.getGender());
        String deduction = Double.toString(employeeToEdit.getDeductionRate());
        deductionRateInput.setText(deduction);
        if (employeeToEdit instanceof PartTimeEmployee){
            PartTimeEmployee temp = (PartTimeEmployee)employeeToEdit;
            hourlyWageInput.setText(String.format ("%.2f", temp.getHourlyWage()));
            hoursPerWeekInput.setText(String.format ("%.2f", temp.getHoursPerWeek()));
            weeksPerYearInput.setText(String.format ("%.2f", temp.getWeeksPerYear()));
            //yearlySalaryInput.setText(Double.toString(temp.calcAnnualGrossIncome()));
        }
        else {
            FullTimeEmployee temp = (FullTimeEmployee)employeeToEdit;
            hourlyWageInput.setText(String.format ("%.2f", temp.getYearlySalary()));
            //weeksPerYearInput.setText("52");
            //hoursPerWeekInput.setText("20");
            //double wage = (((temp.getYearlySalary())/52)/20);
            //hourlyWageInput.setText(Double.toString(wage));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lNLabel = new javax.swing.JLabel();
        firstNameInput = new javax.swing.JTextField();
        hourLabel = new javax.swing.JLabel();
        employeeNumberInput = new javax.swing.JTextField();
        weekLabel = new javax.swing.JLabel();
        invalidLabel = new javax.swing.JLabel();
        fullTimeButton = new javax.swing.JRadioButton();
        partTimeButton = new javax.swing.JRadioButton();
        locLabel = new javax.swing.JLabel();
        doneButton = new javax.swing.JButton();
        genLabel = new javax.swing.JLabel();
        weeksPerYearInput = new javax.swing.JTextField();
        dedLabel = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        hoursPerWeekInput = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<>();
        wageLabel = new javax.swing.JLabel();
        hourlyWageInput = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        empNumLabel = new javax.swing.JLabel();
        deductionRateInput = new javax.swing.JTextField();
        fNLabel = new javax.swing.JLabel();
        lastNameInput = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("EMS - Edit");
        setResizable(false);

        lNLabel.setText("Last Name:");

        firstNameInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameInputActionPerformed(evt);
            }
        });

        hourLabel.setText("Hours / Week:");

        employeeNumberInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeNumberInputActionPerformed(evt);
            }
        });

        weekLabel.setText("Weeks/Year:");

        invalidLabel.setText("INVALID INFORMATION");

        fullTimeButton.setText("Full-Time");
        fullTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullTimeButtonActionPerformed(evt);
            }
        });

        partTimeButton.setText("Part-Time");
        partTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partTimeButtonActionPerformed(evt);
            }
        });

        locLabel.setText("Work Location:");

        doneButton.setText("Submit");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        genLabel.setText("Gender:");

        weeksPerYearInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weeksPerYearInputActionPerformed(evt);
            }
        });

        dedLabel.setText("Deductions Rate:");

        jLabel21.setFont(new java.awt.Font("Garamond", 1, 24)); // NOI18N
        jLabel21.setText("EDIT EMPLOYEE");

        hoursPerWeekInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hoursPerWeekInputActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        wageLabel.setText("Hourly Wage:");

        hourlyWageInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourlyWageInputActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        empNumLabel.setText("Employee Number:");

        deductionRateInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deductionRateInputActionPerformed(evt);
            }
        });

        fNLabel.setText("First Name:");

        lastNameInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameInputActionPerformed(evt);
            }
        });

        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel21)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(doneButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(invalidLabel)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(partTimeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(fullTimeButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(empNumLabel)
                                    .addComponent(fNLabel)
                                    .addComponent(lNLabel)
                                    .addComponent(genLabel)
                                    .addComponent(locLabel)
                                    .addComponent(dedLabel)
                                    .addComponent(wageLabel)
                                    .addComponent(hourLabel)
                                    .addComponent(weekLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(weeksPerYearInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(hoursPerWeekInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(hourlyWageInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(deductionRateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lastNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(firstNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(employeeNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(invalidLabel)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(partTimeButton)
                    .addComponent(fullTimeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(empNumLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fNLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lNLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2)
                    .addComponent(locLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deductionRateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dedLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hourlyWageInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wageLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoursPerWeekInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hourLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weeksPerYearInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weekLabel))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doneButton)
                    .addComponent(jButton3)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    public void setDone (String text) { //Method to publicly change text in the done button
        doneButton.setText(text);
    }
    private void firstNameInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameInputActionPerformed

    private void employeeNumberInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeNumberInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeNumberInputActionPerformed

    private void fullTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullTimeButtonActionPerformed
        // TODO add your handling code here:
        //Setting visible text fields and labels to those corresponding to full time
        fullTimeButton.setSelected(true);
        partTimeButton.setSelected(false);

        weeksPerYearInput.setVisible(false);
        hoursPerWeekInput.setVisible(false);
        hourlyWageInput.setVisible(true);
        deductionRateInput.setVisible(true);
        jComboBox2.setVisible(true);

        jComboBox1.setVisible(true);
        lastNameInput.setVisible(true);
        firstNameInput.setVisible(true);
        employeeNumberInput.setVisible(true);


        locLabel.setVisible(true);

        dedLabel.setVisible(true);

        wageLabel.setVisible(true);
        wageLabel.setText("Yearly Salary: ");
        if (employeeToEdit instanceof PartTimeEmployee) {
            hourlyWageInput.setText("");
        }
        else {
            FullTimeEmployee temp = (FullTimeEmployee)employeeToEdit;
            
            hourlyWageInput.setText(String.format ("%.2f", temp.getYearlySalary()));
            
        }

        empNumLabel.setVisible(true);

        fNLabel.setVisible(true);
        lNLabel.setVisible(true);

        genLabel.setVisible(true);
        hourLabel.setVisible(false);

        weekLabel.setVisible(false);

        doneButton.setVisible(true);

    }//GEN-LAST:event_fullTimeButtonActionPerformed

    private void partTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partTimeButtonActionPerformed
        // TODO add your handling code here:
        //Setting visible text fields and labels to those corresponding to part time
        fullTimeButton.setSelected(false);
        partTimeButton.setSelected(true);
        weeksPerYearInput.setVisible(true);
        hoursPerWeekInput.setVisible(true);
        hourlyWageInput.setVisible(true);
        deductionRateInput.setVisible(true);
        jComboBox2.setVisible(true);

        jComboBox1.setVisible(true);
        lastNameInput.setVisible(true);
        firstNameInput.setVisible(true);
        employeeNumberInput.setVisible(true);


        locLabel.setVisible(true);

        dedLabel.setVisible(true);

        wageLabel.setVisible(true);
        wageLabel.setText("Hourly Wage: ");
        if (employeeToEdit instanceof FullTimeEmployee) {
            hourlyWageInput.setText("");
        }
        else {
            PartTimeEmployee temp = (PartTimeEmployee)employeeToEdit;
            
            
            hourlyWageInput.setText(String.format ("%.2f", temp.getHourlyWage()));
        }

        empNumLabel.setVisible(true);

        fNLabel.setVisible(true);
        lNLabel.setVisible(true);

        genLabel.setVisible(true);
        hourLabel.setVisible(true);

        weekLabel.setVisible(true);

        doneButton.setVisible(true);

    }//GEN-LAST:event_partTimeButtonActionPerformed

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        // TODO add your handling code here:
        valid = true;
        if (done == true) { //Exiting (and disposing) frame once done
            MainJFrame.setMenuEnabled(true);
            MainJFrame.setMenuLabel(false);
            this.dispose();
        }
        
        int oldEmployeeNum = employeeToEdit.getEmployeeNumber();
        int currentEmployeeNum = StringConverter.stringToInteger(employeeNumberInput.getText());
        if (fullTimeButton.isSelected() && done != true) {
            
            FullTimeEmployee empToAdd = new FullTimeEmployee(); //Instantiating new fulltime employee for new information
            //Checking validity of user entries and if so, adding this info to the new employee
            if (StringConverter.stringToInteger(employeeNumberInput.getText()) != -1 && StringConverter.stringToInteger(employeeNumberInput.getText()) < 1000000) {
                 boolean returned = empToAdd.setEmployeeNumber(StringConverter.stringToInteger(employeeNumberInput.getText()));
                 if (!returned && StringConverter.stringToInteger(employeeNumberInput.getText()) != oldEmployeeNum) {
                     valid = false;
                     empNumLabel.setForeground(Color.red);
                 }
                 empNumLabel.setForeground(Color.black);
            } else {
                valid = false;
                empNumLabel.setForeground(Color.red);
            }

            if (StringConverter.stringChecker(firstNameInput.getText())) {
                empToAdd.setFirstName(firstNameInput.getText().trim());
                fNLabel.setForeground(Color.black);
            } else {
                valid = false;
                fNLabel.setForeground(Color.red);
            }
            if (StringConverter.stringChecker(lastNameInput.getText())) {
                empToAdd.setLastName( lastNameInput.getText().trim());
                lNLabel.setForeground(Color.black);
            } else {
                valid = false;
                lNLabel.setForeground(Color.red);
            }
            empToAdd.setGender(jComboBox1.getSelectedItem().toString());

            empToAdd.setWorkLocation(jComboBox2.getSelectedItem().toString());

            if (StringConverter.stringToPercent(deductionRateInput.getText()) != -1) {
                empToAdd.setDeductionRate(StringConverter.stringToPercent(deductionRateInput.getText()));
                dedLabel.setForeground(Color.black);
            } else {
                valid = false;
                dedLabel.setForeground(Color.red);
            }
            if (StringConverter.stringToDollars(hourlyWageInput.getText()) != -1) {
                empToAdd.setYearlySalary(StringConverter.stringToDollars(hourlyWageInput.getText()));
                wageLabel.setForeground(Color.black);
            } else {
                wageLabel.setForeground(Color.red);
                valid = false;
            }
            if (valid == true) { //Removes old employee and adds new employee if user confirms changes in confirmation frame
                invalidLabel.setVisible(false);
                ConfirmationFrame theConFrame = new ConfirmationFrame(this,mainHT,oldEmployeeNum,currentEmployeeNum, empToAdd);
                theConFrame.setVisible(true);
                
            } else {

                invalidLabel.setVisible(true);
            }
            
        }
        if (partTimeButton.isSelected() && done != true) {
            
            PartTimeEmployee empToAdd = new PartTimeEmployee(); //Instantiating new parttime employee for new information

            //Checking validity of user entries and if so, adding this info to the new employee
            if (StringConverter.stringToInteger(employeeNumberInput.getText()) != -1 && StringConverter.stringToInteger(employeeNumberInput.getText()) < 1000000) {
                 boolean returned = empToAdd.setEmployeeNumber(StringConverter.stringToInteger(employeeNumberInput.getText()));
                 if (!returned && StringConverter.stringToInteger(employeeNumberInput.getText()) != oldEmployeeNum) {
                     valid = false;
                     empNumLabel.setForeground(Color.red);
                 }
                 empNumLabel.setForeground(Color.black);
            } else {
                valid = false;
                empNumLabel.setForeground(Color.red);
            }

            if (StringConverter.stringChecker(firstNameInput.getText())) {
                empToAdd.setFirstName(firstNameInput.getText().trim());
                fNLabel.setForeground(Color.black);
            } else {
                valid = false;
                fNLabel.setForeground(Color.red);
            }
            if (StringConverter.stringChecker(lastNameInput.getText())) {
                empToAdd.setLastName( lastNameInput.getText().trim());
                lNLabel.setForeground(Color.black);
            } else {
                valid = false;
                lNLabel.setForeground(Color.red);
            }
            empToAdd.setGender(jComboBox1.getSelectedItem().toString());

            empToAdd.setWorkLocation(jComboBox2.getSelectedItem().toString());

            if (StringConverter.stringToPercent(deductionRateInput.getText()) != -1) {
                empToAdd.setDeductionRate(StringConverter.stringToPercent(deductionRateInput.getText()));
                dedLabel.setForeground(Color.black);
            } else {
                valid = false;
                dedLabel.setForeground(Color.red);
            }
            if (StringConverter.stringToDollars(hourlyWageInput.getText()) != -1) {
                empToAdd.setHourlyWage(StringConverter.stringToDollars(hourlyWageInput.getText()));
                wageLabel.setForeground(Color.black);
            } else {
                valid = false;
                wageLabel.setForeground(Color.red);
            }
            if (StringConverter.stringToDollars(hoursPerWeekInput.getText()) != -1) {
                empToAdd.setHoursPerWeek(StringConverter.stringToDouble(hoursPerWeekInput.getText()));
                hourLabel.setForeground(Color.black);
            } else {
                valid = false;
                hourLabel.setForeground(Color.red);
            }
            if (StringConverter.stringToDollars(weeksPerYearInput.getText()) != -1) {
                empToAdd.setWeeksPerYear(StringConverter.stringToDouble(weeksPerYearInput.getText()));
                weekLabel.setForeground(Color.black);
            } else {
                valid = false;
                weekLabel.setForeground(Color.red);
            }
             if (valid == true) { //Removes old employee and adds new employee if user confirms changes in confirmation frame
                invalidLabel.setVisible(false);
                ConfirmationFrame theConFrame = new ConfirmationFrame(this,mainHT,oldEmployeeNum,currentEmployeeNum, empToAdd);
                theConFrame.setVisible(true);
                
            } else {

                invalidLabel.setVisible(true);
            }

        }

    }//GEN-LAST:event_doneButtonActionPerformed

    private void weeksPerYearInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weeksPerYearInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weeksPerYearInputActionPerformed

    private void hoursPerWeekInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hoursPerWeekInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hoursPerWeekInputActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void hourlyWageInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourlyWageInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hourlyWageInputActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void deductionRateInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deductionRateInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deductionRateInputActionPerformed

    private void lastNameInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameInputActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        //Exiting out the frame once finished
        MainJFrame.setMenuEnabled(true);
        MainJFrame.setMenuLabel(false);
        this.dispose();
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        FullTimeEmployee myEmployee = new FullTimeEmployee();
        EditEmployeeFrame theFrame = new EditEmployeeFrame(myEmployee);
        theFrame.setVisible(true);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dedLabel;
    private javax.swing.JTextField deductionRateInput;
    private javax.swing.JButton doneButton;
    private javax.swing.JLabel empNumLabel;
    private javax.swing.JTextField employeeNumberInput;
    private javax.swing.JLabel fNLabel;
    private javax.swing.JTextField firstNameInput;
    private javax.swing.JRadioButton fullTimeButton;
    private javax.swing.JLabel genLabel;
    private javax.swing.JLabel hourLabel;
    private javax.swing.JTextField hourlyWageInput;
    private javax.swing.JTextField hoursPerWeekInput;
    private javax.swing.JLabel invalidLabel;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel lNLabel;
    private javax.swing.JTextField lastNameInput;
    private javax.swing.JLabel locLabel;
    private javax.swing.JRadioButton partTimeButton;
    private javax.swing.JLabel wageLabel;
    private javax.swing.JLabel weekLabel;
    private javax.swing.JTextField weeksPerYearInput;
    // End of variables declaration//GEN-END:variables
}
