/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 567882
 */

import java.io.*;
import java.awt.Desktop;

public class MenuFrame extends javax.swing.JFrame {
    
    private javax.swing.table.DefaultTableModel mainModel; // Model for the main table
    private boolean sortedUp = false; // If the table is currently sorted up
    private class HeaderEvent extends java.awt.event.MouseAdapter { // Custom mouse event handler for organizing columns
        @Override
        public void mouseClicked(java.awt.event.MouseEvent e) {
            int column = mainTable.columnAtPoint(e.getPoint()); // Get clicked column
            if (MainJFrame.getTheHT().getNumInTable() > 5000) { // Check that the table is not too large for the sort to run quickly
                if (column != 0) {
                    return;
                }
            }
            switch (column) { // Organize column
                case 0:
                    fillByEmployeeNumber();
                    break;
                case 2:
                    fillByFirstName();
                    break;
                case 3:
                    fillByLastName();
                    break;
                case 4:
                    fillByGender();
                    break;
                case 5:
                    fillByLocation();
                    break;
                case 6:
                    fillByDeductionRate();
                    break;
                default:
                    break;
            }
        }
    }

    public MenuFrame(boolean warning) {
        initComponents();
        initializeModel(); // Set value of model
        mainTable.getTableHeader().addMouseListener(new HeaderEvent());  // Initialize custom mouse event handler
        if (!warning) { // Warning label for if no memory file was found
            warningLabel.setVisible(false);
        }
        fillTable(); // Fill the main table
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addEmployeeButton = new javax.swing.JButton();
        removeEmployeeButton = new javax.swing.JButton();
        editEmployeeButton = new javax.swing.JButton();
        viewEmployeeButton = new javax.swing.JButton();
        addLocationButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        searchBar = new javax.swing.JTextField();
        userGuideButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        warningLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addEmployeeButton.setText("Add Employees");
        addEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployeeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addEmployeeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 96, 186, -1));

        removeEmployeeButton.setText("Remove Employees");
        removeEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEmployeeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(removeEmployeeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 146, 186, -1));

        editEmployeeButton.setText("Edit Employee Information");
        editEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEmployeeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(editEmployeeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 196, 186, -1));

        viewEmployeeButton.setText("View Employee Information");
        viewEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEmployeeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(viewEmployeeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 246, 186, -1));

        addLocationButton.setText("Manage Work Locations");
        addLocationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLocationButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addLocationButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 296, 186, -1));

        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee #", "Type", "First Name", "Last Name", "Gender", "Location", "Deduction"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mainTable.getTableHeader().setResizingAllowed(false);
        mainTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(mainTable);
        if (mainTable.getColumnModel().getColumnCount() > 0) {
            mainTable.getColumnModel().getColumn(0).setResizable(false);
            mainTable.getColumnModel().getColumn(1).setResizable(false);
            mainTable.getColumnModel().getColumn(2).setResizable(false);
            mainTable.getColumnModel().getColumn(3).setResizable(false);
            mainTable.getColumnModel().getColumn(4).setResizable(false);
            mainTable.getColumnModel().getColumn(5).setResizable(false);
            mainTable.getColumnModel().getColumn(6).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 586, 422));

        searchBar.setText("Search...");
        searchBar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchBarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchBarFocusLost(evt);
            }
        });
        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });
        getContentPane().add(searchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 54, 186, -1));

        userGuideButton.setText("User Guide");
        userGuideButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userGuideButtonActionPerformed(evt);
            }
        });
        getContentPane().add(userGuideButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 346, 186, -1));

        saveButton.setText("Save Information");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        getContentPane().add(saveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 396, 186, -1));

        warningLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        warningLabel.setText("WARNING, NO MEMORY FOUND");
        warningLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        warningLabel.setPreferredSize(new java.awt.Dimension(186, 16));
        getContentPane().add(warningLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 20, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    public void resizeTable() {
        mainModel.setNumRows(MainJFrame.getTheHT().getNumInTable()); // Set the number of rows to be equal to the number of items in the table
        mainTable.setModel(mainModel); // Update model
        mainTable.getTableHeader().setReorderingAllowed(false); // Turn off unwanted features
        mainTable.getColumnModel().getColumn(0).setResizable(false);
        mainTable.getColumnModel().getColumn(1).setResizable(false);
        mainTable.getColumnModel().getColumn(2).setResizable(false);
        mainTable.getColumnModel().getColumn(3).setResizable(false);
        mainTable.getColumnModel().getColumn(4).setResizable(false);
        mainTable.getColumnModel().getColumn(5).setResizable(false);
        mainTable.getColumnModel().getColumn(6).setResizable(false);
    }
    
    public void cleanTable() {
        mainModel.setNumRows(0); // Reset table completely
        mainTable.setModel(mainModel);
        mainTable.getTableHeader().setReorderingAllowed(false);
        mainTable.getColumnModel().getColumn(0).setResizable(false);
        mainTable.getColumnModel().getColumn(1).setResizable(false);
        mainTable.getColumnModel().getColumn(2).setResizable(false);
        mainTable.getColumnModel().getColumn(3).setResizable(false);
        mainTable.getColumnModel().getColumn(4).setResizable(false);
        mainTable.getColumnModel().getColumn(5).setResizable(false);
        mainTable.getColumnModel().getColumn(6).setResizable(false);
    }
    
    public void addRow(EmployeeInfo employee) {
        mainModel.setNumRows(mainModel.getRowCount() + 1); // Add a row to the table
        mainTable.setModel(mainModel); // Update table model
        mainTable.getTableHeader().setReorderingAllowed(false);
        mainTable.getColumnModel().getColumn(0).setResizable(false);
        mainTable.getColumnModel().getColumn(1).setResizable(false);
        mainTable.getColumnModel().getColumn(2).setResizable(false);
        mainTable.getColumnModel().getColumn(3).setResizable(false);
        mainTable.getColumnModel().getColumn(4).setResizable(false);
        mainTable.getColumnModel().getColumn(5).setResizable(false);
        mainTable.getColumnModel().getColumn(6).setResizable(false);
        fillRow(employee, mainModel.getRowCount() - 1); // Fill the added row with the given employee
        mainTable.removeRowSelectionInterval(0, mainModel.getRowCount() - 1); // Deselsect the currently selected rows
    }
    
    public void initializeModel() { // Creates model for the table, copied from initComponents()
        mainModel = (new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee #", "Type", "First Name", "Last Name", "Gender", "Location", "Deduction"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(mainTable);
        if (mainTable.getColumnModel().getColumnCount() > 0) {
            mainTable.getColumnModel().getColumn(0).setResizable(false);
            mainTable.getColumnModel().getColumn(1).setResizable(false);
            mainTable.getColumnModel().getColumn(2).setResizable(false);
            mainTable.getColumnModel().getColumn(3).setResizable(false);
            mainTable.getColumnModel().getColumn(4).setResizable(false);
            mainTable.getColumnModel().getColumn(5).setResizable(false);
            mainTable.getColumnModel().getColumn(6).setResizable(false);
        }
    }
    
    private void fillRow(EmployeeInfo employee, int row) { // Iterates through the columns of a row, filling them with employee information
        mainTable.setValueAt(StringConverter.empNumberToString(employee.getEmployeeNumber()), row, 0);
        if (employee instanceof PartTimeEmployee) {
            mainTable.setValueAt("Part-Time", row, 1);
        }
        else {
            mainTable.setValueAt("Full-Time", row, 1);
        }
        mainTable.setValueAt(employee.getFirstName(), row, 2);
        mainTable.setValueAt(employee.getLastName(), row, 3);
        mainTable.setValueAt(employee.getGender(), row, 4);
        mainTable.setValueAt(employee.getWorkLocation(), row, 5);
        mainTable.setValueAt(employee.getDeductionRate(), row, 6);
    }
    
    public void fillTable() {
        resizeTable(); // Iterates through the rows, calling fill row with the next employee
        if (MainJFrame.getTheHT().getNumInTable() == 0) {
            return;
        }
        EmployeeInfo employee;
        int i = 0;
        while (true) {
            employee = MainJFrame.getTheHT().iterate();
            if (employee == null) {
                break;
            }
            fillRow(employee, i);
            i++;
        }
        mainTable.removeRowSelectionInterval(0, mainModel.getRowCount() - 1); // Deselect all rows
    }
    
    private void fillByEmployeeNumber() { // Fills rows with employees organized by employee number
        if (MainJFrame.getTheHT().getNumInTable() == 0) {
            return;
        }
        Integer[] sortedList = MainJFrame.getTheHT().sortedNumbers(!sortedUp); // Does the opposite sort of whatever currently exists
        EmployeeInfo employee;
        for (int i = 0; i < sortedList.length; i++) {
            employee = MainJFrame.getTheHT().readFromTable(sortedList[i]); // Fill rows by iterating through array
            fillRow(employee, i);
        }
        if (sortedUp) { // Updated sorted status
            sortedUp = false;
        }
        else {
            sortedUp = true;
        }
    }
    
    private void fillByFirstName() { // Fill sorted by first name
        if (MainJFrame.getTheHT().getNumInTable() == 0) {
            return;
        }
        String [][] sortedList = MainJFrame.getTheHT().sortedFirstNames(!sortedUp); // Does the opposite sort of whatever currently exists
        EmployeeInfo employee;
        for (int i = 0; i < sortedList.length; i++) {
            employee = MainJFrame.getTheHT().readFromTable(Integer.parseInt(sortedList[i][1])); // Fill rows by iterating through array
            fillRow(employee, i);
        }
        if (sortedUp) { // Update sorting status
            sortedUp = false;
        }
        else {
            sortedUp = true;
        }
    }
    
    private void fillByLastName() { // Fill sorted by last name, same method as sort by first name
        if (MainJFrame.getTheHT().getNumInTable() == 0) {
            return;
        }
        String [][] sortedList = MainJFrame.getTheHT().sortedLastNames(!sortedUp);
        EmployeeInfo employee;
        for (int i = 0; i < sortedList.length; i++) {
            employee = MainJFrame.getTheHT().readFromTable(Integer.parseInt(sortedList[i][1]));
            fillRow(employee, i);
        }
        if (sortedUp) { // Update sorting status
            sortedUp = false;
        }
        else {
            sortedUp = true;
        }
    }
    
    private void fillByGender() { // Fill sorted by gender, same method as sort by employee number
        if (MainJFrame.getTheHT().getNumInTable() == 0) {
            return;
        }
        int [] sortedList = MainJFrame.getTheHT().sortedGenders(!sortedUp);
        EmployeeInfo employee;
        for (int i = 0; i < sortedList.length; i++) {
            employee = MainJFrame.getTheHT().readFromTable(sortedList[i]);
            fillRow(employee, i);
        }
        if (sortedUp) {
            sortedUp = false;
        }
        else {
            sortedUp = true;
        }
    }
    
    private void fillByLocation() { // Fill sorted by location, same method as sort by first name
        if (MainJFrame.getTheHT().getNumInTable() == 0) {
            return;
        }
        String [][] sortedList = MainJFrame.getTheHT().sortedLocations(!sortedUp);
        EmployeeInfo employee;
        for (int i = 0; i < sortedList.length; i++) {
            employee = MainJFrame.getTheHT().readFromTable(Integer.parseInt(sortedList[i][1]));
            fillRow(employee, i);
        }
        if (sortedUp) {
            sortedUp = false;
        }
        else {
            sortedUp = true;
        }
    }
    
    private void fillByDeductionRate() { // Fill sorted by deduction rate
        if (MainJFrame.getTheHT().getNumInTable() == 0) {
            return;
        }
        double [][] sortedList = MainJFrame.getTheHT().sortedDeductionRates(!sortedUp); // Does the opposit sort of whatever currently exists
        EmployeeInfo employee;
        for (int i = 0; i < sortedList.length; i++) {
            employee = MainJFrame.getTheHT().readFromTable((int)sortedList[i][1]); // Fill table by iterating through array
            fillRow(employee, i);
        }
        if (sortedUp) { // Updated sorting status
            sortedUp = false;
        }
        else {
            sortedUp = true;
        }
    }
    
    private void editEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEmployeeButtonActionPerformed
        // Creates editEmployeeFrame for the currently selected employee
        if (mainTable.getSelectedRowCount() == 1) { // Checks that only one employee is selected
            EmployeeInfo employeeToEdit = MainJFrame.getTheHT().readFromTable(Integer.parseInt(mainTable.getValueAt(mainTable.getSelectedRow(), 0).toString())); // Retrieve selected employee
            EditEmployeeFrame editFrame = new EditEmployeeFrame(employeeToEdit); // Create new edit employee frame using selected employee
            editFrame.setVisible(true); // Set edit frame visible and this frame disabled
            this.setEnabled(false);
        }
    }//GEN-LAST:event_editEmployeeButtonActionPerformed

    private void viewEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEmployeeButtonActionPerformed
        // Creates viewEmployeeFrame for the currently selected employee
        if (mainTable.getSelectedRowCount() == 1) { // Same method as editEmployeeFrame
            EmployeeInfo employeeToView = MainJFrame.getTheHT().readFromTable(Integer.parseInt(mainTable.getValueAt(mainTable.getSelectedRow(), 0).toString()));
            ViewEmployeeFrame viewFrame = new ViewEmployeeFrame(employeeToView);
            viewFrame.setVisible(true);
            this.setEnabled(false);
        }
    }//GEN-LAST:event_viewEmployeeButtonActionPerformed

    private void addLocationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLocationButtonActionPerformed
        // Creates new add location frame
        AddLoc theLocFrame = new AddLoc(); // Instantiate and set visible a new location management frame
        theLocFrame.setVisible(true);
        this.setEnabled(false); // Disable this frame
    }//GEN-LAST:event_addLocationButtonActionPerformed

    private void removeEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeEmployeeButtonActionPerformed
        // Removes selected employees from the hashtable, then updates mainTable
        if (mainTable.getSelectedRowCount() != 0) { // Check that there are employees selected
            ConfirmationFrame check = new ConfirmationFrame(this); // Create new confirmation frame to check that the user wants to delete the selected employees
            check.setVisible(true);
        }
    }//GEN-LAST:event_removeEmployeeButtonActionPerformed

    public void removeEmployees() {
        int[] employees = mainTable.getSelectedRows(); // Get selected employees
        for (int i = 0; i < employees.length; i++) { // Iterate through employees and remove them from the hashtable
            Object employeeNumber = mainTable.getValueAt(employees[i], 0);
            if (employeeNumber != null) {
                MainJFrame.getTheHT().removeFromTable(Integer.parseInt(employeeNumber.toString()));
            }
        }
        fillTable(); // Update maintable
    }
    
    private void addEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeButtonActionPerformed
        // Creates new add employee frame, same method as location frame
        AddFTEmpFrame theAddFrame = new AddFTEmpFrame();
        theAddFrame.setVisible(true);
        this.setEnabled(false);
    }//GEN-LAST:event_addEmployeeButtonActionPerformed

    private void userGuideButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userGuideButtonActionPerformed
        // Opens user guide pdf
        File userGuide = new File("UserGuide.pdf"); // Create file class for user guide
        try {
            if (Desktop.isDesktopSupported()) {
                Desktop.getDesktop().open(userGuide); // Open user guide
            }
        }
        catch (IOException e) {
        }      
    }//GEN-LAST:event_userGuideButtonActionPerformed

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        // Handles search bar
        String search = searchBar.getText();
        cleanTable(); // Make maintable empty
        EmployeeInfo currentEmployee;
        if (search.equals("")) {
            fillTable(); // If nothing was typed in the search bar, fill table normally
        }
        else if (StringConverter.stringToInteger(search) != -1) { // If search was sucessfully converted to an integer
            if (search.length() == 6) { // If the length is that of a full employee number
                currentEmployee = MainJFrame.getTheHT().readFromTable(StringConverter.stringToInteger(search)); // Search for number in hashtable
                if (currentEmployee == null) {
                    return; // No result
                }
                addRow(currentEmployee); // Display employee if found
                return;
            }
            while (true) {
                currentEmployee = MainJFrame.getTheHT().iterate(); // Go through hashtable and display employee numbers that contain the search
                if (currentEmployee == null) {
                    break;
                }
                if (Integer.toString(currentEmployee.getEmployeeNumber()).contains(search)) {
                    addRow(currentEmployee);
                }
            }
        }
        else if (StringConverter.stringChecker(search)) { // Case of the input being a valid string (no special characters or numbers)
            while (true) { // Iterate though employees and check for strings (firstName, lastName, workLocation) containing the input
                currentEmployee = MainJFrame.getTheHT().iterate();
                if (currentEmployee == null) {
                    break;
                }
                if (currentEmployee.getFirstName().toLowerCase().contains(search.toLowerCase()) || currentEmployee.getLastName().toLowerCase().contains(search.toLowerCase()) || currentEmployee.getWorkLocation().toLowerCase().contains(search.toLowerCase())) {
                    addRow(currentEmployee); // Add matching employee to the mainTable
                }
            }
        }
        else if (StringConverter.stringToDouble(search) != -1) { // If the string is not an integer but is a double
            while (true) {
                currentEmployee = MainJFrame.getTheHT().iterate(); // Iterate through employees
                if (currentEmployee == null) {
                    break;
                }
                if (Double.toString(currentEmployee.getDeductionRate()).contains(search)) {
                    addRow(currentEmployee); // Display employees with matching deduction rates
                }
            }
        }
    }//GEN-LAST:event_searchBarActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        warningLabel.setVisible(false);
        FileStream.writeToFile(); // Save hashtable
        warningLabel.setText("Information Saved!"); // Display label indicating success
        warningLabel.setVisible(true);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void searchBarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchBarFocusGained

        searchBar.setText(""); // If search bar is clicked on
    }//GEN-LAST:event_searchBarFocusGained

    private void searchBarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchBarFocusLost

        searchBar.setText("Search..."); // If searchBar is clicked off
    }//GEN-LAST:event_searchBarFocusLost

    public void setLabelVisibility(boolean visible) {
        warningLabel.setVisible(visible); // Method to set label visibility
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuFrame(false).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEmployeeButton;
    private javax.swing.JButton addLocationButton;
    private javax.swing.JButton editEmployeeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable mainTable;
    private javax.swing.JButton removeEmployeeButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton userGuideButton;
    private javax.swing.JButton viewEmployeeButton;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables
}
